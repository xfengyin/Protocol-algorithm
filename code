import numpy as np 
import random
import matplotlib.pyplot as plt

def distance(v_A,v_B):
    '''
    判断两个传感器节点的一维的距离
    v_A: A 
    v_B: B
    需要返回A，B节点的距离
    '''
    return np.sqrt(np.power((v_A[0]-v_B[0]),2) + np.power((v_A[1]-v_B[1]),2))

def node_point(N):
    '''
    传感器节点的一个集合，传感器节点的数目为N
    nodes：节点的集合
    sign_point: 标记节点是否被选择为簇首节点，并将其初始化为0
    '''
    nodes = []
    sign_point = []
    for i in range(0,N):
        #在矩阵生成[x,y]的坐标
        node = [np.random.random(),np.random.random()]
        nodes.append(node)
        sign_point.append(0) #初始化标记节点

    print('生成：',len(nodes),'个节点')
    print('初始化标记列表为',sign_point)
    return nodes,sign_point

def sel_heads(r,nodes,flags):
    '''
    依据leach协议来选取簇头节点
    r ： 表示选取的轮数
    nodes ： 节点的列表
    P ：比例因子
    '''
    #使用leach协议的阈值T(n)
    P = 0.05*(100/len(nodes))
    Tn = P/(1-P*(r%(1/P)))
    print('阈值T(n)为：',Tn)

    #簇首列表
    heads = []
    #簇成员列表
    members = []
    # 本轮簇首数
    n_nodes = 0

    #对每个节点生成对应的随机数
    rands = [np.random.random() for i in range(len(nodes))]
    print('随机数为：',rands)

    #遍历随机数列表，选取出簇首
    for i in range(len(nodes)):
        #若该节点没有当选为簇首节点
        if flags[i] == 0:
            #该节点对应的随机数小于阈值T(n)
            if rands[i] <= Tn:
                flags[i] = 1
                heads.append(nodes[i])
                n_nodes += 1
                print(nodes[i],'被选为第',n_nodes,'个簇首')
            else: 
                members.append(nodes[i])
        #该节点已被选择过
        else:
            members.append(nodes[i])
    print('簇首为：',len(heads),'个')
    print('成员节点为：',len(members),'个')
    return heads,members

def Clustering(nodes,flag, k=1):
    '''
    进行分簇操作
    nodes: 节点列表
    flag ：节点标记
    k: 轮数
    '''
    #k 轮的集合
    global head_clu
    iter_cluster = []
    #迭代r轮
    for r in range(k):
        #获取簇首以及成员节点的列表
        heads,members = sel_heads(r,nodes,flag)
        #分簇，簇的列表
        cluster = [[]for i in range(len(heads))]
        #把簇首作为首节点添加到聚类列表中
        for i in range(len(heads)):
            cluster[i].append(heads[i])

        #簇分类：遍历节点
        for n in range(len(members)):
            #选取距离最小的节点
            dist_min = 1

            for i in range(len(heads)):
                dis_heads = distance(members[n],heads[i])

                #找到距离最小的簇首对应的heads下标i
                if dis_heads < dist_min:
                    dist_min = dis_heads
                    head_clu = i
            #0个簇首
            if dist_min == 1:
                print('此轮没有簇首！')
                break

            #添加到距离最小的簇首对应的聚类列表
            cluster[head_clu].append(members[n])

        #将簇首作为首节点添加到聚类列表
        # for i in range(len(cluster)):
        # print("第", i + 1, "类包含:", classes[i])

        iter_cluster.append(cluster)
    return iter_cluster
    
def show_plt(cluster):
    '''
    显示分簇图
    cluster : [[类1...],[类2...]....]-->[簇首,成员,成员...]
    '''
    fig = plt.figure()
    wsn = plt.gca()

    wsn.set_title("WSN")
    plt.xlabel("x")
    plt.ylabel("y")

    icon = ['o', '*', '.', 'x', '+', 's']
    color = ['r','b','g','c','y','m']

    for i in range(len(cluster)):
        centor = cluster[i][0]
        for point in cluster[i]:
            wsn.plot([centor[0], point[0]], [centor[1], point[1]], c=color[i % 6], marker=icon[i % 5], alpha=0.4) 

    plt.show()

def run():
    '''
    1.输入节点的个数N
    2.node_point(N):生成N个节点的列表
    3.cluster(nodes,flag,k=10):进行k轮簇的分类，flag已标记的节点不再成为簇首
    4.plt.show(cluster):迭代每次聚类结果，显示连线图
    '''
    N = int(input('请输入节点的个数：\n'))
    nodes,flag = node_point(N)
    iter_cluster = Clustering(nodes,flag, k=20)

    for cluster in iter_cluster:
        show_plt(cluster)

if __name__ == '__main__':
    run()
